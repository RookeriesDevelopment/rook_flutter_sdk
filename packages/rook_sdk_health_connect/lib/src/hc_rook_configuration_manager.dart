import 'package:rook_sdk_core/rook_sdk_core.dart';
import 'package:rook_sdk_health_connect/src/platform/rook_sdk_health_connect_platform_interface.dart';

class HCRookConfigurationManager {
  /// Call this before any other function if you want to see the logs generated by this SDK.
  ///
  /// Available levels:
  ///
  /// * advanced -> All logs from API. All logs from SDK.
  /// * basic -> Basic logs from API. All logs from SDK.
  /// * none -> No logs.
  Future<void> enableNativeLogs() {
    return RookSdkHealthConnectPlatform.instance.enableNativeLogs();
  }

  /// Set the credentials to use this SDK.
  Future<void> setConfiguration(RookConfiguration rookConfiguration) {
    return RookSdkHealthConnectPlatform.instance.setConfiguration(
      rookConfiguration,
    );
  }

  Future<String?> getUserID() {
    return RookSdkHealthConnectPlatform.instance.getUserID();
  }

  /// Initializes all internal SDKs using the [RookConfiguration] provided with [setConfiguration].
  Future<void> initRook() {
    return RookSdkHealthConnectPlatform.instance.initRook();
  }

  /// Sets the current user for data upload.
  Future<void> updateUserID(String userID) {
    return RookSdkHealthConnectPlatform.instance.updateUserID(userID);
  }

  /// Removes the current user for data upload.
  Future<void> clearUserID() {
    return RookSdkHealthConnectPlatform.instance.clearUserID();
  }

  /// Removes the current user from healthConnect data source,
  /// once removed rook servers won't accept any health data from healthConnect.
  Future<void> deleteUserFromRook() {
    return RookSdkHealthConnectPlatform.instance.deleteUserFromRook();
  }

  /// Extract and upload timezone information for the current user.
  ///
  /// **IMPORTANT: This function is already called every time `updateUserID` completes successfully,
  /// in most cases the above behavior is more than enough. Only use this function if you need to update
  /// the timezone information manually.**
  Future<void> syncUserTimeZone() {
    return RookSdkHealthConnectPlatform.instance.syncUserTimeZone();
  }
}
